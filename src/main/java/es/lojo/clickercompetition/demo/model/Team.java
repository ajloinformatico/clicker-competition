package es.lojo.clickercompetition.demo.model;
import es.lojo.clickercompetition.demo.model.Player;
import com.fasterxml.jackson.annotation.JsonBackReference;
import es.lojo.clickercompetition.demo.utilities.StringManagement;
import lombok.*;
import es.lojo.clickercompetition.demo.utilities.MyDates;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.*;

/**
 * @author Antoniojoselojoojeda
 * Team entity M : N With students.
 * A player can create a team and only this player can delete his team
 *
 */
@Entity //identifies as an entity
@Data //annotation to create all of the team
public class Team {
    @Id
    @Getter @Setter //anotation to create getters and setters
    @GeneratedValue(strategy = GenerationType.AUTO) //id pk autogenerated
    private Long id;


    @Column(unique = true)
    private String name;

    private String password;
    private String date; //date it is created
    private Long clicks; //Only for clicks
    private String TeamAvatar;


    //CREATE TABLES CREATE TABLES SIMULTANEOUSLY
    //MARIA DB NEEDS IT EAGER
    @ManyToMany(fetch = FetchType.EAGER)
    @EqualsAndHashCode.Exclude
    @JsonBackReference
    @JoinTable( //Create table internamente
            name = "teams_players",
            joinColumns = @JoinColumn(name = "team_id",
                    referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name = "player_id",
                    referencedColumnName = "id"))
    Set<Player> players = new HashSet<>();



    public void setCapitalizedNames(){
        this.name = StringManagement.capitalize(this.name);
    }
    public void setDefaulDate(){
        this.date = MyDates.today();
    }

    public void setDefaultTeamAvatar(){
        this.setTeamAvatar("./images/default.png");
    }

    //empty constructor required
    public Team() {}

    //team creation with automatic date
    public Team(String name){
        this.name = name;
        this.date = MyDates.today();
        this.TeamAvatar = "./images/default.png";
    }


    public Team(Long id,String name, Long clicks){
        this.id = id;
        this.name = name;
        this.clicks = clicks;
    }

    /**
     * Update player list,
     * @param player: player to player to add to the team
     * It works as a list it is as simple as adding players to both lists
     */
    public void addPlayer(Player player){
        players.add(player);
        player.getTeams().add(this);
    }


    /**
     * Update player list by a players lists
     * @param playerList<Player> : List of players
     */
    public void addPlayersList (ArrayList<Player> playerList){
        playerList.forEach(player -> {
            players.add(player);
            player.getTeams().add(this);
        });
    }

    /**
     * Delete player from team
     * @Param {Long} id ; Player id
     */
    public void deleteOnePlayerFromTeam(Player player){
        players.remove(player);
        player.getTeams().remove(this);
    }

    /**
     * AutoUpdate Clicks
     */
    public void updateCliks(){
        this.clicks = 0L;
        players.forEach(player -> {
            this.clicks += player.getClicks();
        });
    }

}